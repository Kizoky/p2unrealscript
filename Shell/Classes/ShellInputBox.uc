///////////////////////////////////////////////////////////////////////////////
// ShellInputBox.uc
// Copyright 2002 Running With Scissors, Inc.  All Rights Reserved.
//
// A control specifically for acquiring and displaying an input.
//
// History:
//  01/14/03 JMI	Added a background color for extra visibly changing input
//					state and a special notification callback for 
//					UWindowDialogControls (the built-in Epic one is for 
//					UWindowDialogClientWindows).
//
//	12/03/02 JMI	Simplified KeyPressed().  Added KeyUp for symmetry with
//					KeyDown.
//
//	11/27/02 JMI	No longer clears the selection when a key is pressed.
//					Now notifies the owner of right clicks.
//
//	11/26/02 JMI	Simplified to simply block normal editbox input handling
//					and let MenuControlsEdit do the input detection.
//
//	11/25/02 JMI	Started.
//
///////////////////////////////////////////////////////////////////////////////
// This class is to allow us to hook -every- key the editbox receives rather
// than just the ones it deems useful and bypass the modifier keys processing.
// It also can notify a UWindowDialogControl of DE_ values and has a background
// color to make it noticable with regard to other like controls.
///////////////////////////////////////////////////////////////////////////////
class ShellInputBox extends UWindowEditBox;

///////////////////////////////////////////////////////////////////////////////
// Typedefs
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Vars & consts
///////////////////////////////////////////////////////////////////////////////

var ShellInputControl	NotifyControl;
var Color				clrBack;

///////////////////////////////////////////////////////////////////////////////
// Override and don't call base to avoid normal edit field insertion.
///////////////////////////////////////////////////////////////////////////////
function KeyPressed( int iKey, float MouseX, float MouseY )
{
}

///////////////////////////////////////////////////////////////////////////////
// Override and don't call base to avoid normal edit field insertion.
///////////////////////////////////////////////////////////////////////////////
function KeyDown(int iKey, float X, float Y)
{
	bKeyDown = True;
}

///////////////////////////////////////////////////////////////////////////////
// Override to be symmetrical to KeyDown() -- clear bKeyDown.
///////////////////////////////////////////////////////////////////////////////
function KeyUp(int Key, float X, float Y)
{
	bKeyDown = False;
}

///////////////////////////////////////////////////////////////////////////////
// Notify owner of right clicks.
///////////////////////////////////////////////////////////////////////////////
function RClick(float X, float Y) 
{
	Notify(DE_RClick);
}

///////////////////////////////////////////////////////////////////////////////
// Notify input control.
///////////////////////////////////////////////////////////////////////////////
function Notify(byte E)
{
	if (NotifyControl != none)
		NotifyControl.NotifyInput(Self, E);

	Super.Notify(E);
}

///////////////////////////////////////////////////////////////////////////////
// Set the background color.
///////////////////////////////////////////////////////////////////////////////
function SetBackColor(Color clr)
{
	clrBack = clr;
}

defaultproperties
{
	clrBack = (R=255,G=255,B=255,A=255)
}