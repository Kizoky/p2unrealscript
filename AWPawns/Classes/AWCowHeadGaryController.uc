///////////////////////////////////////////////////////////////////////////////
// CowHeadGaryController
// Copyright 2004 RWS, Inc.  All Rights Reserved.
//
// Hunt down the player and have their head explode, killing them, but hurting
// the player. Only spawn these guys, are don't expec them to just
// mill around at least.. they find the player and walk straight at him only.
//
//	Warning!
//	Do not use any of the 'initial states' such as Attack Player or Panic with
// this character or he may do unpredictable things. He will not function as
// expected. Just place this guy and let him go for expected results.
//
///////////////////////////////////////////////////////////////////////////////
class AWCowHeadGaryController extends BystanderController;

///////////////////////////////////////////////////////////////////////////////
// Vars
///////////////////////////////////////////////////////////////////////////////
// User set vars

// Internal vars
var class<P2Damage> AttackerContactDamageClass;	// damage dealt to me when I hit my attacker
var float YellFreq;
var bool bWalkAttack;		// Walks slowly towards you and then blows up on contact, if this
							// is false, the *run* towards you and then blow up

///////////////////////////////////////////////////////////////////////////////
// Const
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Don't fight back
///////////////////////////////////////////////////////////////////////////////
function damageAttitudeTo(pawn Other, float Damage)
{
	Say(MyPawn.myDialog.lGotHit);
}

///////////////////////////////////////////////////////////////////////////////
// Check if we bumped our target, and then kill ourselves (this detonates
// our head which then hurts our target)
///////////////////////////////////////////////////////////////////////////////
function BumpTarget(Actor Other)
{
	if(Pawn.Health > 0)
	{
		Pawn.TakeDamage(Pawn.Health, None, MyPawn.Location, vect(0,0,1), AttackerContactDamageClass);
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
function Bump(Actor Other)
{
	if(Other == Attacker)
		BumpTarget(Other);
}

///////////////////////////////////////////////////////////////////////////////
// Don't do anything looking at people
///////////////////////////////////////////////////////////////////////////////
function CheckObservePawnLooks(FPSPawn LookAtMe)
{
	// STUB
}

///////////////////////////////////////////////////////////////////////////////
// You've just caught on fire.. how do you feel about it?
///////////////////////////////////////////////////////////////////////////////
function CatchOnFire(FPSPawn Doer, optional bool bIsNapalm)
{
	// STUB
}

///////////////////////////////////////////////////////////////////////////////
// You've just be infected by some chemical plague. Not good.
///////////////////////////////////////////////////////////////////////////////
function ChemicalInfection(FPSPawn Doer)
{
	// STUB
}

///////////////////////////////////////////////////////////////////////////////
// No headshot by the rifle, but you've been hurt by it.
///////////////////////////////////////////////////////////////////////////////
function WingedByRifle(P2Pawn Doer, vector HitLocation)
{
	// STUB
}

///////////////////////////////////////////////////////////////////////////////
// Decide what to do about this danger
///////////////////////////////////////////////////////////////////////////////
function GetReadyToReactToDanger(class<TimedMarker> dangerhere, 
								FPSPawn CreatorPawn, 
								Actor OriginActor,
								vector blipLoc,
								optional out byte StateChange)
{
	// STUB
}

///////////////////////////////////////////////////////////////////////////////
// Go to state to see if we care to get down after someone told us to
///////////////////////////////////////////////////////////////////////////////
function ForceGetDown(Pawn Shouter, Pawn AttackingShouter)
{
	// STUB
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Decide what to do next
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state Thinking
{
Begin:

TryAgain:
	Sleep(FRand());

	SetNextState('Thinking');

	// Find a player and run towards him
	SetAttacker(GetRandomPlayer().MyPawn);
	SetEndGoal(Attacker, TIGHT_END_RADIUS);
	Say(MyPawn.myDialog.ldecidetofight);
	if(bWalkAttack)
		GotoStateSave('WalkToTarget');
	else
		GotoStateSave('RunToTarget');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Blow up on contact with your attacker
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state WalkToTarget
{
	function Bump(Actor Other)
	{
		if(Other == Attacker)
			BumpTarget(Other);
		else
			Super.Bump(Other);
	}

	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	function InterimChecks()
	{
		// Randomly check to yell again
		if(Frand() < YellFreq)
			Say(MyPawn.myDialog.ldecidetofight);
		Super.InterimChecks();
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Blow up on contact with your attacker
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state RunToTarget
{
	function Bump(Actor Other)
	{
		if(Other == Attacker)
			BumpTarget(Other);
		else
			Super.Bump(Other);
	}

	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	function InterimChecks()
	{
		// Randomly check to yell again
		if(Frand() < YellFreq)
			Say(MyPawn.myDialog.ldecidetofight);
		Super.InterimChecks();
	}
}

defaultproperties
{
     AttackerContactDamageClass=Class'AWEffects.HeadKillDamage'
     YellFreq=0.100000
     bWalkAttack=True
}
