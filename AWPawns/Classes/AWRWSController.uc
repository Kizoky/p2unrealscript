///////////////////////////////////////////////////////////////////////////////
// AWRWSController
// Copyright 2004 RWS, Inc.  All Rights Reserved.
//
// I work at RWS and will fight for Vince to the death! Or.. pretty close to death at least
//
///////////////////////////////////////////////////////////////////////////////
class AWRWSController extends AWBystanderController;

///////////////////////////////////////////////////////////////////////////////
// Vars
///////////////////////////////////////////////////////////////////////////////
// User set vars

// Internal vars
var Actor BadPickup;		// Bad pickup we didn't like


///////////////////////////////////////////////////////////////////////////////
//  Make sure the pickup we're about to go after isn't one we know is bad.
///////////////////////////////////////////////////////////////////////////////
function CheckDesiredThing(Actor DesireMaker, class<TimedMarker> blip, optional out byte StateChange)
{
	if(BadPickup != DesireMaker)
	{
		Super.CheckDesiredThing(DesireMaker, blip, StateChange);
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// You see something you want, like money or a donut
//
// Focus here holds the item we're interested, be sure not to clear it!
//
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state InvestigateDesiredThing
{
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	function ExamineFirst()
	{
		local P2PowerupPickup ppick;
		// Check if it's still there
		if(Pickup(Focus) != None
			&& !Focus.bDeleteMe)
		{
			ppick = P2PowerupPickup(Focus);

			if(ppick != None)
			{
				if(ppick.Tainted==1)
				{
					BadPickup = ppick;	// Save the one we don't like, so
						// we won't be tricked by it again (can be overwritten)
					GotoState(GetStateName(), 'KickTainted');
				}
			}
		}
	}
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ShootAtAttacker
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state ShootAtAttacker
{
	///////////////////////////////////////////////////////////////////////////////
	// If it's a buddy, in a gun fight, listen to them and just crouch
	///////////////////////////////////////////////////////////////////////////////
	function ForceGetDown(Pawn Shouter, Pawn AttackingShouter)
	{
		if(MyPawn.Physics == PHYS_WALKING
			&& Shouter.Tag == 'AWRWSVince')
		{
			MyPawn.ShouldCrouch(true);
		}
		// otherwise ignore him
	}

	///////////////////////////////////////////////////////////////////////////
	// I've been attacked by someone (again)
	///////////////////////////////////////////////////////////////////////////
	function damageAttitudeTo(pawn Other, float Damage)
	{
		// if not vince, react accordingly
		if(Other == None
			|| Other.Tag != 'AWRWSVince')
		{
			Super.damageAttitudeTo(Other, Damage);
		}
	}
}

defaultproperties
{
}
