///////////////////////////////////////////////////////////////////////////////
// Fluid ripples for things pouring into puddles
///////////////////////////////////////////////////////////////////////////////
class FluidRippleEmitter extends Fluid;

const STOP_EMITTING_TIME	=	0.5;
const FINISH_UP_TIME		=	2.0;
const MAX_LIFE				=	4.0;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
function PostBeginPlay()
{
	Super.PostBeginPlay();
	SetTimer(1.0, false);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
function Destroyed()
{
	if(MyOwner != None
		&& !MyOwner.bPendingDelete)
	{
		// unhook from me
		FluidPuddle(MyOwner).Ripples = None;
	}

	Super.Destroyed();
}

///////////////////////////////////////////////////////////////////////////////
// Move it to the new point, but keep the center and radius (of the puddle)
// in mind
///////////////////////////////////////////////////////////////////////////////
function Reposition(vector NewPoint, optional vector Center, optional float Rad)
{
	local int i;
	local vector offset;

	offset = (NewPoint - Location);
	offset.z = 5;

	for(i = 0; i<Emitters.Length; i++)
	{
		// move and turn things on
		SuperSpriteEmitter(Emitters[i]).AllowParticleSpawn = true;
		Emitters[i].RespawnDeadParticles = true;
		Emitters[i].Disabled = false;
		Emitters[i].StartLocationOffset = offset;
	}

	// prepare to turn things off
	SetTimer(STOP_EMITTING_TIME, false);

	LifeSpan=MAX_LIFE;
}

///////////////////////////////////////////////////////////////////////////////
// stop emitting
///////////////////////////////////////////////////////////////////////////////
function Timer()
{
	local int i;

	for(i = 0; i<Emitters.Length; i++)
	{
		SuperSpriteEmitter(Emitters[i]).AllowParticleSpawn = false;
		Emitters[i].RespawnDeadParticles = false;
	}
	GotoState('FinishingUp');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
function ToggleFlow(float TimeToStop, bool bIsOn)
{
	local int i;

	Super.ToggleFlow(TimeToStop, bIsOn);

	for(i = 0; i<Emitters.Length; i++)
	{
		SuperSpriteEmitter(Emitters[i]).AllowParticleSpawn = false;
		Emitters[i].RespawnDeadParticles = false;
	}
	GotoState('FinishingUp');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// get ready to disable the emitters
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state FinishingUp
{
	/*
	///////////////////////////////////////////////////////////////////////////////
	// stop all together
	///////////////////////////////////////////////////////////////////////////////
	function ToggleFlow(float TimeToStop, bool bIsOn)
	{
		local int i;

		Super.ToggleFlow(TimeToStop, bIsOn);

		log(self$"my owner was "$Owner);
		// unhook from me
		FluidPuddle(Owner).Ripples = None;
		// get rid of me
		Destroy();
	}
	*/

	///////////////////////////////////////////////////////////////////////////////
	// stop all together
	///////////////////////////////////////////////////////////////////////////////
	function Timer()
	{
		// get rid of me
		Destroy();
	}

Begin:
	SetTimer(FINISH_UP_TIME, false);
}


defaultproperties
{
} 
