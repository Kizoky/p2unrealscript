///////////////////////////////////////////////////////////////////////////////
// PriestController
// Copyright 2002 RWS, Inc.  All Rights Reserved.
//
// High-level RWS AI Controllers for Priest in a confession booth
//
// Kamek 4/30 - check to see if the dude whips it out
///////////////////////////////////////////////////////////////////////////////
class PriestController extends FFCashierController;

///////////////////////////////////////////////////////////////////////////////
// Vars
///////////////////////////////////////////////////////////////////////////////
var bool bForgaveDudeSins;

///////////////////////////////////////////////////////////////////////////////
// Const
///////////////////////////////////////////////////////////////////////////////
const NPC_WAIT_TIME	=	3.0;

///////////////////////////////////////////////////////////////////////////////
// Can't see anything
///////////////////////////////////////////////////////////////////////////////
function ActOnPawnLooks(FPSPawn LookAtMe, optional out byte StateChange)
{
	return;
}

///////////////////////////////////////////////////////////////////////////////
// Ignores all danger
///////////////////////////////////////////////////////////////////////////////
function GetReadyToReactToDanger(class<TimedMarker> dangerhere, 
								FPSPawn CreatorPawn, 
								Actor OriginActor,
								vector blipLoc,
								optional out byte StateChange)
{
	return;
}
/*
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Don't worry about cutters
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state HandleCutter
{
Begin:
	// Set it back to our interest because we can't help him
	Focus = InterestPawn;
	GotoState(MyOldState);
}
*/
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// I've asked someone to walk over to me, so I'm waiting on them
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state NextCustomerWalkingToMe
{
Begin:
	if(CheckForCustomerStandTouch(InterestPawn))
		HandleThisPerson(P2Pawn(InterestPawn));

	// Gesture for them to come forward
	MyPawn.PlayHelloGesture(1.0);

	Sleep(10);
	PrintDialogue("I can help you over here "$Focus);

	GotoStateSave('WaitForCustomers', 'WaitForNextPerson');

	Goto('Begin');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Get someone to come to me
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state AskForNextCustomer
{
Begin:

SameCustomer:

OneCustomer:

ManyCustomers:
	bResetInterests=true;
	Sleep(10 + FRand()*10);
	GotoStateSave('WaitForCustomers', 'WaitForNextPerson');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ExchangeGoodsAndServices
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state ExchangeGoodsAndServices
{
	/*
WatchForCustomerReturn:
	// assigns statecount, we can't change states in a function that returns a variable
	CheckForCustomerProx();
	if(statecount == 2)
		Goto('Begin'); // he's ready to buy things again
	else if(statecount == 1)
	{
		Cleanup();
		GotoStateSave('WaitForCustomers');// he's too far away, so just wait on other customers
	}

	Sleep(1.0);
	Goto('WatchForCustomerReturn');
*/
WatchForCustomerReturn:
Begin:
	SetupCustomer();
	// Let the door close
	Sleep(NPC_WAIT_TIME);

	// customer says hi
	TalkSome(CustomerPawn.myDialog.lGreeting, CustomerPawn,true);
	PrintDialogue(InterestPawn$" Greeting");
	Sleep(SayTime);
/*
	if(FRand() <= 0.3)
	{
		// customer says hi
		TalkSome(CustomerPawn.myDialog.lCrying, CustomerPawn);
		PrintDialogue(InterestPawn$" crying");
		Sleep(SayTime);
	}
*/
	// priest blesses them and sends them on their way
	TalkSome(MyPawn.myDialog.lPriest_Next,,true);
	PrintDialogue("....bless you, Next!");
	Sleep(SayTime);

	// return to handling the cash register
	Cleanup();
	GotoStateSave('WaitForCustomers');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ExchangeWithDude
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state ExchangeWithDude
{
WatchForCustomerReturn:
	// assigns statecount, we can't change states in a function that returns a variable
	CheckForCustomerProx();
	if(statecount == 2)
		Goto('Begin'); // he's ready to buy things again
	else if(statecount == 1)
	{
		Cleanup();
		GotoStateSave('WaitForCustomers');// he's too far away, so just wait on other customers
	}
	Sleep(1.0);
	Goto('WatchForCustomerReturn');

Begin:
	SetupCustomer();

	// With these cashiers, you don't have to bring the product to them, you go to them
	// and ask for it. They give the product and you give them the money.
	bResetInterests=false;
	// Just talk to the dude, like normal
	GotoState('TakePaymentFromDude');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// TakePaymentFromDude
// Dude confesses his sins
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state TakePaymentFromDude
{
	function CheckForDudeShlong()
	{
		if (CustomerPawn.Weapon.IsA('UrethraWeapon')
			&& PlayerController(CustomerPawn.Controller) != None)
			{
				if( Level.NetMode != NM_DedicatedServer ) PlayerController(CustomerPawn.Controller).GetEntryLevel().EvaluateAchievement(PlayerController(CustomerPawn.Controller),'Confession');
			}
	}
	
Begin:
	// dude asks father to bless him
	PrintDialogue(InterestPawn$" dude bless me father ");
	TalkSome(CustomerPawn.myDialog.lDude_ConfessSins, CustomerPawn,true);
	Sleep(SayTime);
	CheckForDudeShlong();

	// priest asks if he donated
	PrintDialogue("Did you donate money?");
	TalkSome(MyPawn.myDialog.lPriest_Confession1);
	Sleep(SayTime);
	CheckForDudeShlong();

	// dude says yes
	PrintDialogue(InterestPawn$" dude yes");
	TalkSome(CustomerPawn.myDialog.lYes, CustomerPawn);
	Sleep(SayTime);
	CheckForDudeShlong();

	// priest agrees to bless him
	PrintDialogue("Well then you are forgiven");
	TalkSome(MyPawn.myDialog.lPriest_Confession2);
	Sleep(SayTime);
	CheckForDudeShlong();

	// dude says thanks
	PrintDialogue(InterestPawn$" dude thanks");
	TalkSome(CustomerPawn.myDialog.lThanks, CustomerPawn);
	Sleep(SayTime);
	CheckForDudeShlong();

	// return to handling the cash register
	GotoState('WaitForCustomers');
}

defaultproperties
{
//	GameHint=""
}