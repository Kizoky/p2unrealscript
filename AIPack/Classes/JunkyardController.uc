///////////////////////////////////////////////////////////////////////////////
// JunkyardController
// Copyright 2002 RWS, Inc.  All Rights Reserved.
//
// Guy that runs the junkyard. You can buy an alternator
// from him, but you have to pay for it, then go walking with
// him to get it in the back of the junkyard.
//
///////////////////////////////////////////////////////////////////////////////
class JunkyardController extends NapalmController;

///////////////////////////////////////////////////////////////////////////////
// Vars
///////////////////////////////////////////////////////////////////////////////
// User set vars

///////////////////////////////////////////////////////////////////////////////
// Const
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Act like normal bystander--comes after you if he has guns. (Don't use
// napalm version)
///////////////////////////////////////////////////////////////////////////////
function Trigger( actor Other, Pawn EventInstigator )
{
	Super(BystanderController).Trigger(Other, EventInstigator);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Don't worry about cutters
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state HandleCutter
{
Begin:
	// Set it back to our interest because we can't help him
	Focus = InterestPawn;
	GotoState(MyOldState);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// I've asked someone to walk over to me, so I'm waiting on them
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state NextCustomerWalkingToMe
{
Begin:
	if(CheckForCustomerStandTouch(InterestPawn))
		HandleThisPerson(P2Pawn(InterestPawn));

	// Gesture for them to come forward
	MyPawn.PlayHelloGesture(1.0);

	Sleep(10);
	PrintDialogue("I can help you over here "$Focus);

	GotoStateSave('WaitForCustomers', 'WaitForNextPerson');

	Goto('Begin');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Get someone to come to me
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state AskForNextCustomer
{
Begin:

SameCustomer:

OneCustomer:

ManyCustomers:
	bResetInterests=true;
	Sleep(10 + FRand()*10);
	GotoStateSave('WaitForCustomers', 'WaitForNextPerson');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// DudeHasInsufficientFunds
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state DudeHasNoFunds
{
Begin:
	if(CheckToGiggle())
		Sleep(SayTime);

	// cashier says hi
	TalkSome(MyPawn.myDialog.lGreeting,,true);
	PrintDialogue("Greeting");
	Sleep(SayTime);

	// dude says hi
	PrintDialogue(InterestPawn$" greeting ");
	TalkSome(CustomerPawn.myDialog.lGreeting, CustomerPawn,true);
	Sleep(SayTime);

	// dude says he wants an alternator
	PrintDialogue(InterestPawn$" i want napalm");
	TalkSome(CustomerPawn.myDialog.lDude_BuyAlternator, CustomerPawn);
	Sleep(SayTime);

	// cashier states how much it will be
	statecount = GetTotalCostOfYourProducts(CustomerPawn, MyPawn);
	PrintDialogue("that'll be...");
	SayTime = Say(MyPawn.myDialog.lNumbers_Thatllbe, bImportantDialog);
	Sleep(SayTime);
	SayTime = SayThisNumber(statecount,,bImportantDialog);
	PrintDialogue(statecount$" bucks");
	Sleep(SayTime + 0.1);
	if(statecount > 1)
		SayTime = Say(MyPawn.myDialog.lNumbers_Dollars, bImportantDialog);
	else

		SayTime = Say(MyPawn.myDialog.lNumbers_SingleDollar, bImportantDialog);
	Sleep(SayTime + FRand());

	// Wait on dude to pay you for the thing
	log("waiting on the money");

	// dude says something negative
	PrintDialogue(InterestPawn$" something negative ");
	TalkSome(CustomerPawn.myDialog.lNegativeResponseCashier, CustomerPawn);
	Sleep(SayTime);

	// cashier ays hmmm
	PrintDialogue("hmmm");
	TalkSome(MyPawn.myDialog.lHmm);
	Sleep(SayTime);

	// say something mean
	TalkSome(MyPawn.myDialog.lLackOfMoney);
	Sleep(SayTime);
	PrintDialogue("Insufficient funds, buy something!");

	// return to handling the cash register
	GotoState('WaitForCustomers');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// WaitOnDudeToPay
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state WaitOnDudeToPay
{
Begin:
	if(CheckToGiggle())
		Sleep(SayTime);

	// cashier says hi
	TalkSome(MyPawn.myDialog.lGreeting,,true);
	PrintDialogue("Greeting");
	Sleep(SayTime);

	// dude says hi
	PrintDialogue(InterestPawn$" greeting ");
	TalkSome(CustomerPawn.myDialog.lGreeting, CustomerPawn,true);
	Sleep(SayTime);

	// dude says he wants an alternator
	PrintDialogue(InterestPawn$" i want napalm");
	TalkSome(CustomerPawn.myDialog.lDude_BuyAlternator, CustomerPawn);
	Sleep(SayTime);

	// cashier states how much it will be
	statecount = GetTotalCostOfYourProducts(CustomerPawn, MyPawn);
	PrintDialogue("that'll be...");
	SayTime = Say(MyPawn.myDialog.lNumbers_Thatllbe, bImportantDialog);
	Sleep(SayTime);
	SayTime = SayThisNumber(statecount,,bImportantDialog);
	PrintDialogue(statecount$" bucks");
	Sleep(SayTime + 0.1);
	if(statecount > 1)
		SayTime = Say(MyPawn.myDialog.lNumbers_Dollars, bImportantDialog);
	else

		SayTime = Say(MyPawn.myDialog.lNumbers_SingleDollar, bImportantDialog);
	Sleep(SayTime + FRand());

	// Wait on dude to pay you for the thing
	log("waiting on the money");
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// TakePaymentFromDude
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state TakePaymentFromDude
{
	///////////////////////////////////////////////////////////////////////////////
	// If you haven't attacked this guy, then trigger an errand
	///////////////////////////////////////////////////////////////////////////////
	function EndState()
	{
		// Make sure the dude isn't attacking you, and that's why you left this
		// state
		if(Attacker != CustomerPawn)
		{
			// Make him your friend, so you can fight the dogs, side by side
			MyPawn.bPlayerIsFriend=true;
			// Start the movie
			TriggerEvent(ErrandEvent1, InterestPawn, InterestPawn);
		}

		bDudeHasPaid=true;	

		// Go to cashier end version (not napalm)
		Super(CashierController).EndState();
	}
Begin:
	FinishTransaction();

	// return to handling the cash register
	GotoState('WaitForCustomers');
}

defaultproperties
{
	ErrandEvent1="AlternatorPaidFor"
}