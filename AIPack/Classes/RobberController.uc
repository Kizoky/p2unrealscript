///////////////////////////////////////////////////////////////////////////////
// RobberController
// Copyright 2002 RWS, Inc.  All Rights Reserved.
//
// High-level RWS AI Controllers for bank robbers
///////////////////////////////////////////////////////////////////////////////
class RobberController extends BystanderController;

///////////////////////////////////////////////////////////////////////////////
// Vars
///////////////////////////////////////////////////////////////////////////////
// User set vars

// Internal vars

///////////////////////////////////////////////////////////////////////////////
// Const
///////////////////////////////////////////////////////////////////////////////
const FIND_VICTIM_RAD = 2000;

///////////////////////////////////////////////////////////////////////////////
// Someone might have shouted get down, said hi, or asked for money.. see what to do
// Go to state to see if we care to get down after someone told us to
///////////////////////////////////////////////////////////////////////////////
function RespondToTalker(Pawn Talker, Pawn AttackingShouter, ETalk TalkType, out byte StateChange)
{
//	PrintStateError(" default RespondToTalker called");
}

///////////////////////////////////////////////////////////////////////////////
// Go to state to see if we care to get down after someone told us to
///////////////////////////////////////////////////////////////////////////////
function ForceGetDown(Pawn Shouter, Pawn AttackingShouter)
{
//	PrintStateError(" default ForceGetDown called");
}

///////////////////////////////////////////////////////////////////////////
// This is to set a few special people types, with attributes that are specific
// to the controller, not the person. So the controller can hand set a few
// pawn attributes, that way different people can be effected by the same controller
///////////////////////////////////////////////////////////////////////////
function ForceInitPawnAttributes()
{
	// Set special bank robber vars
	MyPawn.Cajones=1.0;
	MyPawn.PainThreshold=1.0;
	MyPawn.Cowardice=0.0;
	MyPawn.Rebel=1.0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Decide what to do next
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state Thinking
{
	ignores CheckDeadBody, CheckDeadHead, CheckDesiredThing, FreeToSeekPlayer;
	///////////////////////////////////////////////////////////////////////////
	// Run to where you want to rob (it's our home tag)
	///////////////////////////////////////////////////////////////////////////
	function RunToRobPoint()
	{
		local Actor GoHere;

		foreach AllActors(class'Actor', GoHere, MyPawn.HomeTag)
		{
			log(MyPawn$" RunToRobPoint found "$GoHere);
			SetEndGoal(GoHere, DEFAULT_END_RADIUS);
			return;
		}
	}

	///////////////////////////////////////////////////////////////////////////
	// nothing on my mind when we start
	///////////////////////////////////////////////////////////////////////////
	function BeginState()
	{
		Super.BeginState();

		// Get out my big gun
		SwitchToBestWeapon();

		// Make sure we're nuts about guns
		MyPawn.bGunCrazy=true;
	}

Begin:
TryAgain:
	Sleep(FRand()*0.5);

	// Tell others if you have a weapon out
	ReportViolentWeaponNoStasis();
	// go rob your home point
	SetNextState('ReadyToRob');
	RunToRobPoint();
	GotoStateSave('RunToTarget');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ReadyToRob 
// waiting to fight with the police
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state ReadyToRob
{
	ignores CheckDeadBody, CheckDeadHead, CheckDesiredThing;

	///////////////////////////////////////////////////////////////////////////////
	// Shout get down, and there's anyone to yell at, focus on them
	///////////////////////////////////////////////////////////////////////////////
	function YellAtPeople()
	{
		local P2Pawn Shoutee;

		// Don't let this fail, definitely shout
		ShoutGetDown(MyPawn.Location, true, Shoutee);

		if(Shoutee != None)
			Focus = Shoutee;
	}

	function BeginState()
	{
		PrintThisState();

		MyPawn.SetMood(MOOD_Combat, 1.0);
	}

Begin:
	Sleep(FRand());

	YellAtPeople();

	Sleep(SayTime);

	ReportViolentWeaponNoStasis();

	Sleep(FRand()*5);
	Goto('Begin');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Rampaging
// kill the nearest person to you, who isn't your bud
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state Rampaging
{
	ignores CheckDeadBody, CheckDeadHead, CheckDesiredThing;

	function BeginState()
	{
		local P2Pawn KillMe;

		PrintThisState();

		foreach CollidingActors(class'P2Pawn', KillMe, FIND_VICTIM_RAD, MyPawn.Location)
		{
			// not me or a bud
			if(KillMe != MyPawn
				&& !SameGang(KillMe)
				&& KillMe.Health > 0)
			{
				InterestPawn = KillMe;
			}
		}
	}

Begin:

	if(InterestPawn != None
		&& InterestPawn.Health > 0)
	{
		SetAttacker(InterestPawn);
		GotoStateSave('AssessAttacker');
	}

	GotoStateSave('Thinking');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ShootAtAttacker
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state ShootAtAttacker
{
	///////////////////////////////////////////////////////////////////////////////
	// Decide what to do now that someone is dead
	///////////////////////////////////////////////////////////////////////////////
	function DecideNextState()
	{
		GotoStateSave('Rampaging');
	}
}


defaultproperties
{
	BackToHandsFreq=0.0
}