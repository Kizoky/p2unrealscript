///////////////////////////////////////////////////////////////////////////////
// FollowPlayerController
// Act like regular bystanders but will follow and protect the dude.
///////////////////////////////////////////////////////////////////////////////
class FollowPlayerController extends MilitaryController;

const HANG_OUT_RADIUS = 512.0;
const CATCH_UP_RADIUS = 1024.0;
const FIND_DUDE_RADIUS = 4096.0;

const CHECK_FOR_DUDE_TIME = 5.0;

var Pawn DudePawn;
var float LastCheckedForDude;

///////////////////////////////////////////////////////////////////////////////
// Local spot to set my attacker, only assigns old when not none.
///////////////////////////////////////////////////////////////////////////////
function SetAttacker(Pawn NewA, optional bool bDontUpdateLocation)
{
	// Never set the dude as attacker
	if (NewA == DudePawn)
		return;
	else
		Super.SetAttacker(NewA, bDontUpdateLocation);
}

///////////////////////////////////////////////////////////////////////////////
// Decide what to do about this danger
///////////////////////////////////////////////////////////////////////////////
function GetReadyToReactToDanger(class<TimedMarker> dangerhere, 
								FPSPawn CreatorPawn, 
								Actor OriginActor,
								vector blipLoc,
								optional out byte StateChange)
{
	// If the dude attacks someone, attack them too unless we're busy with something
	// If we have a DudePawn, check to protect him
	if(Attacker == None
		&& DudePawn != None)
	{
		// Someone is attacking our DudePawn
		if((PersonController(CreatorPawn.Controller) != None
				&& PersonController(CreatorPawn.Controller).Attacker == DudePawn)
			|| (AnimalController(CreatorPawn.Controller) != None
				&& AnimalController(CreatorPawn.Controller).Attacker == DudePawn))
		{
			SetAttacker(CreatorPawn); 
			GotoStateSave('AttackTarget');
			return;
		}
		// Our DudePawn is attacking someone
		else if(CreatorPawn == DudePawn)
		{
			// If the player has a live enemy, go after them
			if(P2Player(DudePawn.Controller) != None
					&& FPSPawn(P2Player(DudePawn.Controller).Enemy) != None
					&& !FPSPawn(P2Player(DudePawn.Controller).Enemy).bPlayerIsFriend
					&& P2Player(DudePawn.Controller).Enemy.Health > 0)
			{
				SetAttacker(FPSPawn(P2Player(DudePawn.Controller).Enemy));
				GotoStateSave('AttackTarget');
				return;
			}
		}
	}
	Super.GetReadyToReactToDanger(dangerhere, CreatorPawn, OriginActor, blipLoc, StateChange);
}

///////////////////////////////////////////////////////////////////////////
// Find a player and follow them
///////////////////////////////////////////////////////////////////////////
function FindDude()
{
	local P2Pawn CheckP;

	// check all the pawns around me.	
	ForEach CollidingActors(class'P2Pawn', CheckP, FIND_DUDE_RADIUS, MyPawn.Location)
	{
		if (PlayerController(CheckP.Controller) != None)
		{
			DudePawn = CheckP;
			break;
		}
	}
}

///////////////////////////////////////////////////////////////////////////
// Dude is always our friend
///////////////////////////////////////////////////////////////////////////
function bool FriendWithMe(FPSPawn Other)
{
	if (PlayerController(Other.Controller) != None)
		return true;
	else
		return Super.FriendWithMe(Other);
}

///////////////////////////////////////////////////////////////////////////
// Catch up with dude
///////////////////////////////////////////////////////////////////////////
function CheckToCatchUp()
{
	local PathNode CheckP;
	
	// wait until done with attackers
	if (Attacker != None)
		return;
	
	if (DudePawn == None)
		FindDude();
		
	// If we're too far away from our dude catch back up
	if (DudePawn != None && EndGoal != DudePawn
		&& ((VSize(MyPawn.Location - DudePawn.Location) > CATCH_UP_RADIUS) || (!FastTrace(MyPawn.Location,DudePawn.Location)))
		)
	{
		SetEndGoal(DudePawn, HANG_OUT_RADIUS);
		SetNextState('Thinking');
		GotoState('RunToTarget');
	}
	
	LastCheckedForDude = Level.TimeSeconds;
}

// catch-all
event Tick(float dT)
{
	if (Level.TimeSeconds > LastCheckedForDude + CHECK_FOR_DUDE_TIME)
		CheckToCatchUp();
}
/*
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Leg motion
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state LegMotionToTarget
{
	///////////////////////////////////////////////////////////////////////////////
	// Things to do while you're in locomotion
	///////////////////////////////////////////////////////////////////////////////
	function InterimChecks()
	{
		CheckToCatchUp();
		Super.InterimChecks();
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Leg motion
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state WalktoTarget
{
	///////////////////////////////////////////////////////////////////////////////
	// Things to do while you're in locomotion
	///////////////////////////////////////////////////////////////////////////////
	function InterimChecks()
	{
		CheckToCatchUp();
		Super.InterimChecks();
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Leg motion
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state Thinking
{
	function BeginState()
	{
		Super.BeginState();
		CheckToCatchUp();
	}
}
*/