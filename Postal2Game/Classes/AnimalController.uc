///////////////////////////////////////////////////////////////////////////////
// AnimalController
// Copyright 2002 RWS, Inc.  All Rights Reserved.
//
// High-level RWS AI Controllers for animals
///////////////////////////////////////////////////////////////////////////////
class AnimalController extends LambController;

///////////////////////////////////////////////////////////////////////////////
// Vars
///////////////////////////////////////////////////////////////////////////////
var AnimalPawn	MyPawn;		// local animal pawn version of Pawn variable

///////////////////////////////////////////////////////////////////////////////
// Const
///////////////////////////////////////////////////////////////////////////////
const ANIMAL_BONE_PELVIS= 'Bip01 pelvis';


///////////////////////////////////////////////////////////////////////////////
// Possess the pawn
///////////////////////////////////////////////////////////////////////////////
function Possess(Pawn aPawn)
{
	Super.Possess(aPawn);

	MyPawn = AnimalPawn(Pawn);
	
	if(MyPawn == None)
		PrintStateError("Possess: MyPawn is None");

	MyPawn.SetMovementPhysics();
	
	if (MyPawn.Physics == PHYS_Walking)
		MyPawn.SetPhysics(PHYS_Falling);

	MyNextLabel='Begin';
	OldEndPoint = MyPawn.Location;

	PersonalSpace = (1.5*MyPawn.CollisionRadius) + (FRand()*(3.3*MyPawn.CollisionRadius));

	// See if the GameMod wants to do anything.
	P2GameInfoSingle(Level.Game).BaseMod.ModifyNPC(Pawn);

	HookHero(FPSPawn(FindActorByTag(MyPawn.HeroTag)));
}

///////////////////////////////////////////////////////////////////////////////
// Cat's and the like don't hurt people by jumping on them
///////////////////////////////////////////////////////////////////////////////
function BaseChange()
{
	local float decorMass;
	
	if ( MyPawn.bInterpolating )
		return;
	if ( (MyPawn.base == None) && (MyPawn.Physics == PHYS_None) )
		MyPawn.SetPhysics(PHYS_Falling);
	else if( PeoplePart(MyPawn.Base) != None)
	{
		MyPawn.JumpOffPawn();
	}
	// Pawns can only set base to non-pawns, or pawns which specifically allow it.
	// Otherwise we do some damage and jump off.
	else if ( Pawn(MyPawn.Base) != None )
	{	
		if ( !Pawn(MyPawn.Base).bCanBeBaseForPawns )
		{
			MyPawn.JumpOffPawn();
		}
	}
	else if ( (Decoration(MyPawn.Base) != None) && (MyPawn.Velocity.Z < -400) )
	{
		decorMass = FMax(Decoration(MyPawn.Base).Mass, 1);

		// NPC's can still crush other things
		MyPawn.Base.TakeDamage((-2* MyPawn.Mass/decorMass * MyPawn.Velocity.Z/400), MyPawn, 
								MyPawn.Location, 0.5 * MyPawn.Velocity, class'Crushed');
	}
}

///////////////////////////////////////////////////////////////////////////////
// Used only for AIScripts, make sure the MyPawn gets cleared too
///////////////////////////////////////////////////////////////////////////////
function PendingStasis()
{
	Super.PendingStasis();
	MyPawn = None;
}

///////////////////////////////////////////////////////////////////////////////
// The player is our hero. We can only have one hero, but the player
// can have multiple dog friends.
///////////////////////////////////////////////////////////////////////////////
function SetPlayerAsHero(FPSPawn PlayerPawn)
{
	local P2Player p2p;

	// Link the two up
	if(PlayerPawn != None
		&& Hero == None)
	{
		Hero = PlayerPawn;
		MyPawn.HeroTag = Hero.Tag;
		// Make him your friend
		MyPawn.bPlayerIsFriend=true;
		// Make him not your enemy anymore.
		MyPawn.bPlayerIsEnemy=false;

		p2p = P2Player(PlayerPawn.Controller);
		if(p2p != None)
		{
			p2p.AddAnimalFriend(Mypawn);
			//log(self$" player is now our hero !");
			// Add me to the list of pawns that should be destroyed
			// in our original levels, because we're now travelling with the dude
			if(P2GameInfoSingle(Level.Game) != None
				&& P2GameInfoSingle(Level.Game).TheGameState != None)
				P2GameInfoSingle(Level.Game).TheGameState.AddPersistentPawn(MyPawn);
			// Link the player to them, so they don't get effected by catnip time
			//FPSPawn(Pawn).SetOwner(PlayerPawn);
			FPSPawn(Pawn).bIgnoreTimeDilation=true;
		}
	}
}

///////////////////////////////////////////////////////////////////////////////
// Set our new hero
// Don't let player enemies have dude as a hero.
///////////////////////////////////////////////////////////////////////////////
function HookHero(FPSPawn NewHero, optional out byte Worked)
{
	if(NewHero != None
		/*&& !MyPawn.bPlayerIsEnemy*/)
	{
		Worked=1;
		if(NewHero.bPlayer)
		{
			SetPlayerAsHero(NewHero);
			// Gain other super powers--like never going into stasis!
			DisallowStasis();
		}
		else
		{
			Hero = NewHero;
		}
	}
}

///////////////////////////////////////////////////////////////////////////////
// Unset the current hero
///////////////////////////////////////////////////////////////////////////////
function UnhookHero()
{
	local P2Player p2p;

	if(Hero != None)
	{
		p2p = P2Player(Hero.Controller);

		if(p2p != None)
		{
			p2p.RemoveAnimalFriend(MyPawn);
			log(self$" player is no LONGer our hero !");
			// Remove me from the list of pawns that are dead/gone, so I'll 'return' back to
			// my original level.
			// Don't remove us if we've chunked up, because we probably just got added, 
			// to be remembered.
			if(P2GameInfoSingle(Level.Game) != None
				&& P2GameInfoSingle(Level.Game).TheGameState != None
				&& !MyPawn.bChunkedUp)
				P2GameInfoSingle(Level.Game).TheGameState.RemovePersistentPawn(MyPawn);
			// Unhook us from his time dilation effects
			//FPSPawn(Pawn).SetOwner(None);
			FPSPawn(Pawn).bIgnoreTimeDilation=false;
			// Reallow stasis, because we're just a normal animal again
			ReallowStasis();
		}

		MyPawn.bPlayerIsFriend=false;
		MyPawn.HeroTag = '';
		Hero = None;
	}
}

///////////////////////////////////////////////////////////////////////////////
// In the pissing state, say pissing is valid, only then
///////////////////////////////////////////////////////////////////////////////
function bool PissingValid()
{
	return false;
}

///////////////////////////////////////////////////////////////////////////////
// Determines how much a threat to the player this pawn is
///////////////////////////////////////////////////////////////////////////////
function float DetermineThreat()
{
	return 0.0;
}

///////////////////////////////////////////////////////////////////////////////
// See about this prey
///////////////////////////////////////////////////////////////////////////////
function InvestigatePrey(AnimalPawn Prey)
{
	// STUB
}

///////////////////////////////////////////////////////////////////////////
// When attacked, just short circuit
///////////////////////////////////////////////////////////////////////////
function damageAttitudeTo(pawn Other, float Damage)
{
	local vector dir;

	if ( (Other != None) && (Other != Pawn) && (Damage > 0) )
	{
	}
}

///////////////////////////////////////////////////////////////////////////////
// Decide what to do about this danger
///////////////////////////////////////////////////////////////////////////////
function GetReadyToReactToDanger(class<TimedMarker> dangerhere, 
								FPSPawn CreatorPawn, 
								Actor OriginActor,
								vector blipLoc,
								optional out byte StateChange)
{
	return;
}

///////////////////////////////////////////////////////////////////////////////
// Because animals are more simple, we can have a general 'startled' function
///////////////////////////////////////////////////////////////////////////////
function StartledBySomething(Pawn Meanie)
{

}

///////////////////////////////////////////////////////////////////////////////
// You've just caught on fire.. how do you feel about it?
///////////////////////////////////////////////////////////////////////////////
function CatchOnFire(FPSPawn Doer, optional bool bIsNapalm)
{
	MyPawn.SetOnFire(Doer, bIsNapalm);

	GotoState('ImOnFire');
}

///////////////////////////////////////////////////////////////////////////////
// True means it's okay for you to sniff my butt
///////////////////////////////////////////////////////////////////////////////
function bool ReadyForASniff(FPSPawn Sniffer)
{
	return false;
}

///////////////////////////////////////////////////////////////////////////////
// An animal caller is trying to get you to come to it
///////////////////////////////////////////////////////////////////////////////
function RespondToAnimalCaller(FPSPawn Thrower, Actor Other, out byte StateChange)
{
	// STUB
}

///////////////////////////////////////////////////////////////////////////////
// Set our attacker
///////////////////////////////////////////////////////////////////////////////
function SetAttacker(FPSPawn NewAttacker)
{
	if(NewAttacker != Attacker)
	{
		Attacker = NewAttacker;
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// initialize physics by falling to the ground
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
auto state InitFall
{
	ignores MarkerIsHere, damageAttitudeTo;

	///////////////////////////////////////////////////////////////////////////////
	//	Decide what to start doing
	///////////////////////////////////////////////////////////////////////////////
	function DecideNextState()
	{
		ForceInitPawnAttributes();

		FPSPawn(Pawn).PrepInitialState();

		// Figure out our home nodes, if we have any
		if(FPSPawn(Pawn).bCanEnterHomes)
			FindHomeList(FPSPawn(Pawn).HomeTag);
		// Link to the remaining path nodes
		FindPathList();

		// You've been told to do something specific (like if you came in through a spawner)
		if(MyNextState != 'None'
			&& MyNextState != '')
			GotoNextState();
		else	// If you're not doing anything specific, go into stasis on start-up
		{
			// Save our old state as Thinking, and go here, if the stasis thing
			// below fails
			GotoStateSave('Thinking');

			if(MyPawn.TryToWaitForStasis())
			{
				// Now try immediately on game start-up, to go into stasis. If you're 
				// in view of the dude when he starts, that's fine, you'll be brought
				// right back out.
				GoIntoStasis();
			}
		}
	}

Begin:
	OldMoveTarget = FindRandomDest();
	//log("old move target "$OldMoveTarget);
	Sleep(0.1);
	Goto('Begin'); // repeat state
End:
	DecideNextState();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Decide what to do next
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state Thinking
{
	///////////////////////////////////////////////////////////////////////////
	// nothing on my mind when we start
	///////////////////////////////////////////////////////////////////////////
	function BeginState()
	{
		Super.BeginState();

		// clear vars
		Focus = None;
		SetAttacker(None);
		InterestPawn=None;
		EndGoal = None;
		EndRadius = 0;
		SetNextState('');
		Pawn.SetWalking(true);
	}

Begin:
	Sleep(2*FRand());

	if(!bPreparingMove)
	{
		// walk to some random place I can see (not through walls)
		SetNextState('Thinking');
		if(!PickRandomDest())
			Goto('Begin');	// Didn't find a valid point, try again
		GotoStateSave('WalkToTarget');
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// LegMotionToTarget
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state LegMotionToTarget
{
	///////////////////////////////////////////////////////////////////////////////
	// Might not be the end goal, but the actor hit what he was going for.
	// Make sure animals don't try to go into autodoors, if they do, they go to
	// my state and pick again. This'll keep them from going through doors at all.
	///////////////////////////////////////////////////////////////////////////////
	event HitPathGoal(Actor Goal, vector Dest)
	{
		// Get a new goal
		Super.HitPathGoal(Goal, Dest);

		// If the animal is trying to pick an autodoor to go to next,
		// make him go somewhere else
		if(AutoDoor(MoveTarget) != None)
		{
			// pick another random state
			SetEndGoal(FindRandomDest(), DEFAULT_END_RADIUS);
			// and go back to this state
			GotoState(GetStateName());
		}
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// RunToTarget
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state RunToTarget extends LegMotionToTarget
{
	///////////////////////////////////////////////////////////////////////////////
	// Things to do while you're in locomotion
	///////////////////////////////////////////////////////////////////////////////
	function InterimChecks()
	{
		DodgeThinWall();
		CheckForObstacles();
		// If our actor is a pawn, then get ready to update it frequently
		if(Pawn(EndGoal) != None)
		{
			if(EndGoal != None)
				SetActorTarget(EndGoal, true);
			else
				SetActorTargetPoint(EndPoint, true);
		}
	}

	///////////////////////////////////////////////////////////////////////////////
	//	Set up the targets
	///////////////////////////////////////////////////////////////////////////////
	function BeginState()
	{
		Super.BeginState();

		// We hope MyNextState was set to something useful, before we start
		if(MyNextState=='')
			PrintStateError(" no mynextstate");
		//log("inside run to target "$MyNextState);
		Pawn.SetWalking(false);
		SetRotation(Pawn.Rotation);
		if(EndGoal != None)
			SetActorTarget(EndGoal);
		else
			SetActorTargetPoint(EndPoint);
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// WalkToTarget
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state WalkToTarget extends LegMotionToTarget
{
	///////////////////////////////////////////////////////////////////////////////
	// Things to do while you're in locomotion
	///////////////////////////////////////////////////////////////////////////////
	function InterimChecks()
	{
		Super.InterimChecks();

		HandleStasisChange();
	}

	///////////////////////////////////////////////////////////////////////////////
	//	Set up the targets
	///////////////////////////////////////////////////////////////////////////////
	function BeginState()
	{
		Super.BeginState();

		// We hope MyNextState was set to something useful, before we start
		if(MyNextState=='')
			PrintStateError(" no mynextstate");
		Pawn.SetWalking(true);
		SetRotation(Pawn.Rotation);
		if(EndGoal != None)
			SetActorTarget(EndGoal);
		else
			SetActorTargetPoint(EndPoint);

		statecount=0;
	}

	///////////////////////////////////////////////////////////////////////////////
	// Set up our stasis abilities if we haven't yet
	///////////////////////////////////////////////////////////////////////////////
	function EndState()
	{
		// Now that everything has calmed down, set the person stasis time, if they
		// haven't already. This can fail, so this is only a try. And even then
		// they don't instantly go into stasis. They go about for a while, then
		// try to really do it.
		MyPawn.TryToWaitForStasis();

		// restore our movement
//		MyPawn.MovementPct = MyPawn.default.MovementPct;
//		MyPawn.WalkingPct = MyPawn.default.WalkingPct;

		Super.EndState();
	}

Begin:
	if(Pawn.Physics == PHYS_FALLING)
		WaitForLanding();
	else
	{
		if(MoveTarget != None)
			MoveTowardWithRadius(MoveTarget,Focus,UseEndRadius,,,,true);
		else //if(bMovePointValid)
			MoveToWithRadius(MovePoint,Focus,UseEndRadius,,true);
		InterimChecks();
		Sleep(0.0);
	}
	Goto('Begin');// run this state again
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Falling through the air (probably thrown)
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state FallingFar
{
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
defaultproperties
{
}