///////////////////////////////////////////////////////////////////////////////
// PLCowPawn
// Copyright 2014, Running With Scissors, Inc. All Rights Reserved
//
// PL cows, these have a certain set of behaviors that AW doesn't have
///////////////////////////////////////////////////////////////////////////////
class PLMadCowController extends MadCowController;

const STUN_TIME = 10.0;

///////////////////////////////////////////////////////////////////////////////
// You hit a wall or something, so get stunned
///////////////////////////////////////////////////////////////////////////////
function GotStunnedBy(Actor Other)
{
	MyPawn.StopAcc();
	if (PLCowPawn(MyPawn) != None)
		PLCowPawn(MyPawn).PlayHitWallSound();
	GotoState('GettingStunned');	
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ThinkAngry
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state ThinkAngry
{
	///////////////////////////////////////////////////////////////////////////////
	// If you pick something, then you'll precharge first, then you'll charge
	// otherwise, you'll just run around crazily
	///////////////////////////////////////////////////////////////////////////////
	function bool FindTarget()
	{
		local Actor keeptarget;
		local P2Player keepp;
		local Vector Extent;
		local Vector HitLocation, HitNormal;

		// If has a head, he can decide where to charge, otherwise, he just runs around
		// all crazy like.
		if(AWCowPawn(MyPawn).bHasHead)
		{
			// Check if we have a target set for us
			if(HateTillDeath != None
				&& HateTillDeath.Health > 0)
				keeptarget = HateTillDeath;
			else if(FRand()< PLMadCowPawn(MyPawn).PickTargetFreq)
			{
				// Pick the player
				if(FRand()< PLMadCowPawn(MyPawn).PickDudeFreq)
				{
					keepp = GetRandomPlayer();
					keeptarget = keepp.MyPawn;
				}
				// pick something else to hit
			}

			// If we have a target and can see him from here, chaaaaaaarrrrge!
			Extent.X = CollisionRadius * 2;
			Extent.Y = CollisionRadius * 2;
			if(keeptarget != None
				&& FastTrace(keeptarget.Location, MyPawn.Location)
				&& Trace(HitLocation, HitNormal, KeepTarget.Location, MyPawn.Location, True, Extent) == KeepTarget)
			{
				// Pick point past the character
				if(FPSPawn(keeptarget) != None)
					SetAttacker(FPSPawn(keeptarget));
				ChargeTarget = keeptarget;
				GotoStateSave('PreCharge');
				return true;
			}
		}
		return false;
	}
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Charging
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state Charging
{
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	event Bump(actor Other)
	{
		if(Pawn(Other) != None
			&& PLMadCowPawn(Other) == None)
		{
			if(AngryBump(Other, ChargeDamage, CHARGE_HIT_RATIO))
			{
				GotoStateSave('FinishCharge');
			}
		}
		else if (Other.bWorldGeometry)
		{
			// If he hit a wall or something else solid, get stunned
			GotStunnedBy(Other);
		}
	}
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	event Touch(actor Other)
	{
		if (Other.bWorldGeometry)
		{
			// If he hit a wall or something else solid, get stunned
			GotStunnedBy(Other);
		}
		else if (PLMadCowPawn(Other) != None)
			Super.Touch(Other);
	}
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	event HitWall( vector HitNormal, actor HitWall )
	{
		GotStunnedBy(HitWall);
		Super.HitWall(HitNormal, HitWall);
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Getting Stunned
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state GettingStunned extends Standing
{
	ignores DamageAttitudeTo, HandleAttack, Bump;
	
Begin:
	MyPawn.PlayAnimStanding();
	SetNextState('Stunned');
	if (PLCowPawn(MyPawn) != None)
		PLCowPawn(MyPawn).PlayAnimStunIn();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Stunned
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state Stunned extends Standing
{
	ignores DamageAttitudeTo, HandleAttack, Bump;
	
	///////////////////////////////////////////////////////////////////////////////
	// stop at the animation end, and go about as before
	///////////////////////////////////////////////////////////////////////////////
	function AnimEnd(int channel)
	{
		MyPawn.AnimEnd(channel);
	}
	
Begin:
	if (PLCowPawn(MyPawn) != None)
		PLCowPawn(MyPawn).PlayAnimStunLoop();
	Sleep(STUN_TIME + FRand() * 2);
	GotoState('StunnedRecover');
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Recovering from stun
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state StunnedRecover extends Standing
{
	ignores DamageAttitudeTo, HandleAttack, Bump;
	
Begin:
	SetNextState('ThinkAngry');
	if (PLCowPawn(MyPawn) != None)
		PLCowPawn(MyPawn).PlayAnimStunOut();
}
