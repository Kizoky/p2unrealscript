///////////////////////////////////////////////////////////////////////////////
// PLCowPawn
// Copyright 2014, Running With Scissors, Inc. All Rights Reserved
//
// PL cows, these have a certain set of behaviors that AW doesn't have
///////////////////////////////////////////////////////////////////////////////
class PLCowController extends AWCowController;

///////////////////////////////////////////////////////////////////////////////
// Vars, consts, enums etc.
///////////////////////////////////////////////////////////////////////////////
var bool bBeingMilked;	// Don't want to run off while the dude is trying to milk us

///////////////////////////////////////////////////////////////////////////////
// We're being milked, so hold tight.
///////////////////////////////////////////////////////////////////////////////
function BeingMilkedBy(Pawn Milker)
{
	bBeingMilked = (Milker != None);
}

///////////////////////////////////////////////////////////////////////////////
// We don't want this while trying to milk cows
///////////////////////////////////////////////////////////////////////////////
event StandBump(actor Other, out byte StateChange)
{
	if (Pawn(Other) == None
		|| !Pawn(Other).Weapon.IsA('BucketWeapon'))
		Super.StandBump(Other, StateChange);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Decide what to do next
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state Thinking
{
Begin:
	if(Frand() < MOO_SOUND_FREQ)
		AWCowPawn(MyPawn).PlayNormalMoo();

	// If we're being milked, hold still for 'em
	if(bBeingMilked
		|| FRand() < AWCowPawn(MyPawn).StandThenFeedFreq)
	{
		SetNextState('Thinking','FeedThink');
		GotoStateSave('Standing');
	}
	else if(FRand() < AWCowPawn(MyPawn).FeedFreq)
	{
FeedThink:
		SetNextState('Thinking');
		GotoStateSave('Feeding');
	}
	else
	{
		// walk to some random place, close by, that I can see (not through walls)
		if(!PickRandomDest())
			UseNearestPathNode(2048);
		SetNextState('Thinking');
		GotoStateSave('WalkToTarget');
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// WalkToTarget
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
state WalkToTarget
{
	///////////////////////////////////////////////////////////////////////////////
	// If the dude tries to milk us, hold still for him
	///////////////////////////////////////////////////////////////////////////////
	function BeingMilkedBy(Pawn Milker)
	{
		Global.BeingMilkedBy(Milker);
		if (bBeingMilked)
			GotoState('Thinking');
	}

	///////////////////////////////////////////////////////////////////////////////
	// We don't want this while trying to milk cows
	///////////////////////////////////////////////////////////////////////////////
	event Bump(actor Other)
	{
		if (Pawn(Other) == None
			|| !Pawn(Other).Weapon.IsA('BucketWeapon'))
			Super.Bump(Other);
	}
}
