///////////////////////////////////////////////////////////////////////////////
// MeshLoader.uc
// Copyright 2003 Running With Scissors, Inc.  All Rights Reserved.
//
// By placing
// this in Entry, it maintains a reference to meshes to keep them from being
// loaded over and over.
//
///////////////////////////////////////////////////////////////////////////////
class MeshLoader extends Info
	config(system)
	placeable;

///////////////////////////////////////////////////////////////////////////////
// Vars, structs, consts, enums...
///////////////////////////////////////////////////////////////////////////////

// 1 means it will maintain references to a lot of Meshs using the MeshLoader in the Entry level. 
// 0 means it won't let the MeshLoader do anything.
var ()globalconfig int PreloadMeshesOnStartup;

var() array<Mesh> CheckMeshes;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
function ClearArray()
{
	CheckMeshes.Remove(0, CheckMeshes.Length);
	//log(self$" cleared array ");
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
function AddMesh(Mesh addme)
{
	local int i;

	if(PreloadMeshesOnStartup != 0)
	{
		// Check first if it's already in there
		for(i=0; i<CheckMeshes.Length; i++)
		{
			// It's already in there, so get out
			if(CheckMeshes[i] == addme)
			{
				//log(self$" already have "$addme$" at "$i);
				return;
			}
		}

		i = CheckMeshes.Length;
		CheckMeshes.Insert(i, 1);
		CheckMeshes[i] = addme;
		//log(self$" added "$addme$" at "$i);
	}
}

///////////////////////////////////////////////////////////////////////////////
// Default properties
///////////////////////////////////////////////////////////////////////////////
defaultproperties
	{
	PreloadMeshesOnStartup=1
	}
